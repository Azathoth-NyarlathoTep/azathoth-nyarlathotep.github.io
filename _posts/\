---
title: Lab01 - Xv6 and Unix utilities
date: 2025-3-30 13:50:00 +0800
categories: [6.s081, lab01]
tags: [notebook]
description: lab01的学习记录和题解
pin: false

---

## About
> 该课程前几章最好连续着看，如果中间搁置一段时间再看容易串不起来，主播现在就是重新看一遍(事实证明后面看了再来看一遍确实常看常新)

本课程的大多数内容和实验都是基于一个xv6操作系统的扩展实现的，我们将手动完善这个系统，这是一个Unix的简化系统，它将在qemu模拟器上模拟出来，在这里我想先解释一下**qemu和xv6的启动**是怎么个事，虽然这是lab02才会学习的内容

**QEMU:** 全称**quick emulator**，当脑中想到这个东西的时候，与其将其想象为一个C语言程序，你更应该将其想象为一个主板，而QEMU在真正的硬件上运行使得不同架构的系统可以运行在你的计算机上

介绍操作系统的组成结构就不得不提底层的硬件，常见的硬件资源包括**CPU，内存，磁盘，网卡**这些，而在操作系统的最上层，我们会运行各种程序如**文本编辑器(VI)，C编译器(CC)，Shell等**，这些运行的程序都在同一个空间中，我们称之为**用户空间(Userspace)**，而与用户空间所对应区别于的，有一个程序会始终运行即**Kernel**，它里面包含各种服务来维护用户空间的进程，而本课程的关注点也主要在于**Kernel，连接Kernel和用户空间的接口和Kernel内软件的架构等**。

Kernel中的服务最为值得关心的其中一个是**文件系统**，而另一个即是**进程管理系统**，对于前者，我们可以认为其存在的作用是管理文件内容并找出文件具体在磁盘的位置，后者中，每一个用户空间程序都被称之为一个进程，有自己的内存和共享的CPU时间，Kernel会管理内存的分配问题，对内存进行复用和划分。

接下来我们同时对应用程序如何和Kernel交互以及他们之间的接口长什么样感兴趣，这种接口一般通过**系统调用(System Call)来完成**，系统调用会实际上运行在内核空间。给个例子，如果一个应用程序想要打开一个文件，那么会调用`open`这个系统调用，并将文件名作为参数传入

关于系统调用，在xv6中，它们都是实现在`kernel`中的`sysfile.c`中的，如`open`调用在其中实现为`sys_open`，这些定义在kernel中因而往往有对硬件直接的操控权限，但`user`层中往往需要调用这些系统调用，所以我们在`user`中有`usys.pl`这样的一个脚本，在编译整个系统后，会根据脚本内容生成对应的文件，而汇编文件`usys.S`就是这样生成的，有了它我们就可以在user层中调用这些系统调用

### 管道(pipe)
管道是内核的一种缓冲区，有读写两端，其实现实际上是在内核内存中，**这也解释了为什么它能有跨进程读写的基础，而管道正式为了进程间的交互实现的**，以文件描述符对的形式作用，语法上创建管道为`pipe(p)`，其中p为一个数组，当创建管道后会和文件描述符一样分别将当下最小的两个文件描述符分配给`p[0]`和`p[1]`。**需要注意的是管道的两端有明确的读写端区分，即数据流向是单向的，只能由`p[1]`写入并由`p[0]`流出被读取**

通过一个实例来讲解：
```
int p[2];
char *argv[2];
argv[0] = "wc";
argv[1] = 0;
pipe(p);
if(fork() == 0) {
    close(0);
    dup(p[0]);
    close(p[0]);
    close(p[1]);
    exec("/bin/wc", argv);
} else {
    write(p[1], "hello world\n", 12);
    close(p[0]);
    close(p[1]);
}
```
这里在创建了管道后将读写描述符记录在数组`p`中，而在创建了子进程后，在子进程中关闭描述符`0`再调用`dup`函数，将管道的**读端口**拷贝到描述符0上，这个时候读端口对应了两个描述符，若想理解这个过程可以看作管道的两个端口也是一种文件的抽象，这就像Unix的设计理念**一切皆文件**一样，调用`dup`的过程实际上是找到`p[0]`对应的文件表项并创建新的文件描述符指向这个表项，在这里即是`0`，然后将新描述符返回

而像`wc`这样的程序，一般都是从描述符`0`来获得数据，它本身并不关心是从哪来的，而`0`对应的是标准输入还是管道的读端则是`Shell`做的事情

### 文件系统(file system)


## Xv6 and Unix Utilities
> This lab will familiarize you with xv6 and its system calls

> 键入`make qemu`，构建模拟器然后运行`xv6`，键入`Ctrl-a x`以退出

Lab1要求我们实现一些应用程序，为了实现这些应用程序我们将调用一些系统调用接口，而这些接口有着真正能调用硬件资源的权限，所以也是我们完成应用程序的基础

### sleep
> 你可能会疑惑为什么系统中有这么一个`sleep`接口却还要写这样一个应用程序，那是因为所以系统调用都是用来帮助写应用程序的，而Shell要执行命令需要一个真正的程序作为命令，也就是写的`sleep.c`文件，这也解释了系统调用接口和用户接口的区别

**sleep应用程序实现：**
> by the way, 在nvim中要想复制到系统剪切板需要键入`" + y`，这里的双引号是为了告诉系统调用`+寄存器`也即系统剪切板寄存器

```
#include "kernel/types.h"
#include "kernel/stat.h"
#include "user/user.h"

int main(int args, char *argv[])
{
    if (args > 2) {
	fprintf(2, "Please enter yout arguments!\n");
	exit(1);
    } else {
	int n = atoi(argv[1]);
	sleep(n);
	exit(0);
    }
}
```
关于sleep系统调用是如何实现的，以及更底层的系统原语等，还是等后面学到再深究

这里主要思想是处理参数的数量以及将参数字符串转换成整数类型，关键注意点在于最后用的是`exit(0)`而非`return 0`，前者是直接退出了这个进程，后者只是返回入口点，也许在xv6中较为精简，没有用于处理返回后退出的`exit`，所以如果在这些lab中用`return 0`会直接卡住

### pingpong
> 该程序设计本意是为了让学员了解进程间的交互——管道的使用，要求是父进程向子进程发送**一个字节**并在子进程接受，在接受之后再向父进程发送**一个字节**，通过完成程序能够加深对管道的理解

**pingpong应用程序实现:**
```
#include "kernel/types.h"
#include "kernel/stat.h"
#include "user/user.h"

int main(int args, char *argv[])
{
    int p[2];
    char buf[2];
    char *parmsg = "a";
    char *chdmsg = "b";

    pipe(p);
    if(fork() == 0) {
	if(read(p[0], buf, 1) != 1) {
	    fprintf(2, "Cannot read from parents!\n");
	    exit(1);
	}
	printf("child received character : %c\n", buf[0]);
	//close(p[0]);
	printf("%d: received ping\n", getpid());

	if(write(p[1], chdmsg, 1) != 1) {
	    fprintf(2, "Cannot write to parents!\n");
	    exit(1);
	}
	//close(p[1]);

	exit(0);
    } else {
	if(write(p[1], parmsg, 1) != 1) {
	    fprintf(2, "Cannot write to child!\n");
	    exit(1);
        }
	//close(p[1]);
	//wait(0);

	if(read(p[0], buf, 1) != 1) {
	    fprintf(2, "Cannot read from child!\n");
	    exit(1);
	}
	printf("parents received character : %c\n", buf[0]);
	//close(p[0]);
	printf("%d: received pong\n", getpid());

	exit(0);
    }
}
```
这里用`a`和`b`分别代表由父进程和子进程传递给对方的信息，一个字节符合题目要求，而`read`函数的特性决定了它在对应端口的描述符关闭前会一直等待数据读入，所以不论父子进程的前后运行关系都会在接受到之后再进行下一步的运行

### primes
> 素数筛，**每次从管道读端得到的数据选出第一个即最小的一个即为质数**，并用它对剩下的质数进行筛选，如果是其倍数则不是质数，将筛完的结果传入下一个管道，依次更新得出所有质数，图解如下：

![素数筛](../assets/images/sieve.gif)

**primes应用程序实现：**
```
#include "kernel/types.h"
#include "kernel/stat.h"
#include "user/user.h"

void primes(int *p) {
    int a, b;
    close(p[1]);
    if(read(p[0], (void*)&a, sizeof(a)) != sizeof(a)) {
	fprintf(2, "Read fail!\n");
	exit(1);
    }
    printf("prime %d\n", a);

    if(read(p[0], (void *)&b, sizeof(b))) {
        int p1[2];
    	pipe(p1);
    	if(fork() == 0) {
	    primes(p1);
    	} else {
	    close(p1[0]);
	    do {
		if(b % a != 0) {
		    write(p1[1], (void *)&b, sizeof(b));
		}
	    } while(read(p[0], (void *)&b, sizeof(b)));

	    close(p[0]);
	    close(p1[1]);
	    wait(0);
    	}
    	exit(0);
    }
}

int main(int argc, char *argv[]) {
    int p[2];
    int start = 2;
    int end = 35;
    pipe(p);
    //close(p[0]);
    for(int i = start; i <= end; i++) {
	if(write(p[1], (void *)&i, sizeof(i)) != sizeof(i)) {
	    fprintf(2, "Write fail!\n");
	    exit(1);
	}
    }
    close(p[1]);
    primes(p);

    exit(0);
}
```
整个筛选过程有两个管道`p`和`p1`，对于一个进程而言，分别表示从上一进程传进来的以及要传入到下一进程的，所以主要在于一些细节问题：在C语言中，`read`一般会读入指定数量的数据，除非识别到对应端口的关闭，**所以我们需要在进入下一进程前就把对应的写端给关闭，从而在read循环读入数据时能够在读完最后一个数据后恰好返回`0`从而退出循环**

### find
> find程序接受两个参数，一个是路径一个是寻找对象的名称，如`find . b`就是在当前目录下找`b`这个文件，哪怕遇到子目录也会递归寻找

**find应用程序实现：**
```
#include "kernel/types.h"
#include "kernel/stat.h"
#include "user/user.h"
#include "kernel/fs.h"

void find(char *path, char *filename) {
    char buf[512], *p;
    int fd;	//文件描述符

    struct dirent dir;	//目录信息
    struct stat st;	//文件状态

    if((fd = open(path, 0)) < 0) {
	fprintf(2, "find: cannot open %s\n", path);
	return;
    }

    if(fstat(fd, &st) < 0) {
	fprintf(2, "find: cannot stat %s\n", filename);
	close(fd);
	return;
    }

    switch(st.type) {
	case T_FILE:	//讨论给定路径是文件的情况
	    //返回最后一个'/'的位置，因为这些系统调用有些和C语言标准库冲突，故不能用标准库的一些简便函数
	    char *name;
	    for(name = path + strlen(path); name >= path && *name != '/'; name--) ;
	    name++;
	    //操作之后name刚好指向需要对比名字的那个字符串的第一位上 

	    if(strcmp(name, filename) == 0) {
		printf("%s\n", path);
	    }
	    
	    break;
	
	case T_DIR:	//讨论给定路径是目录的情况
	    if(strlen(path) + 1 + DIRSIZ + 1 > sizeof(buf)) {
		printf("find: path too long\n");
		break;
	    }
	    strcpy(buf, path);
	    p = buf + strlen(buf);
	    *p++ = '/';

	    while(read(fd, &dir, sizeof(dir)) == sizeof(dir)) {
		if(dir.inum == 0 || (strcmp(dir.name, ".") == 0) || (strcmp(dir.name, "..") == 0))	//只有'.'目录和'..'目录都跳过才能正确，而在一个目录中，通常这两个是排在最前面的两个结构
		    continue;
		memmove(p, dir.name, DIRSIZ);
		p[DIRSIZ] = 0;	//理解为 = '\0'，二者是等价的
	    
	        if(stat(buf, &st) < 0) {
		    fprintf(2, "find: cannot stat %s\n", buf);
		    continue;
	        }
	    	if(st.type == T_FILE) {
		    if(strcmp(dir.name, filename) == 0) {
		        printf("%s\n", buf);
		    }
	    	} else if (st.type == T_DIR) {
		    find(buf, filename);
	        }
	    }
	    break;
    }
    close(fd);
}

int main(int argc, char *argv[]) {
    if(argc != 3) {
	fprintf(2, "Please enter a dir and a filename!\n");
	exit(1);
    } else {
	char *path = argv[1];
	char *filename = argv[2];
	find(path, filename);
	exit(0);
    }
}
```
找的这个`path`有可能是一个文件，因而我们会先对其进行判断，我们会看到用到了`fd = open(path, 0)`，这是正确的，因为在xv6中哪怕是目录也会抽象为文件，正常为其分配文件描述符，我们将在`fstat(fd, &st)`中处理这个描述符对应的文件来判断其状态
